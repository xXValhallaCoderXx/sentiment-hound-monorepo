generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"  //the value to adjust or add if you dont have it
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
  shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING") // used for migrations
}


model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Task {
  id              String    @id @default(cuid())
  status          String
  contentPost     ContentPost @relation(fields: [contentPostId], references: [id])
  contentPostId   String  @unique
}

model ContentPost {
  id            String    @id @default(cuid())
  platform      String
  contentId     String
  author        String?
  title         String
  description   String?
  publishedAt   String
  image         String?
  responses     Response[]
  task          Task?
}

model Response {
  id            String    @id @default(cuid())
  remoteId      String
  parentId      String?
  platform      String
  author        String? 
  publishedAt   DateTime?
  updatedAt     DateTime?
  likes         Int?
  content       String
  sentiment     String?
  contentPost   ContentPost @relation(fields: [contentPostId], references: [id])
  contentPostId String
  aspects       Aspect[]
}

model Aspect {
  id            String    @id @default(cuid())
  type          String
  sentiment     String
  response      Response @relation(fields: [responseId], references: [id])
  responseId    String
}
